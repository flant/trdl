version: "3"

silent: true

vars:
  version: "0.0.0"
  os: "{{OS}}"
  arch: '{{ternary "arm64" ARCH (eq ARCH "arm")}}'
  mode: '{{ternary "cgo" "go" (eq .os "linux")}}'
  cgoTags: "dfrunsecurity dfrunnetwork dfrunmount dfssh containers_image_openpgp osusergo exclude_graphdriver_devicemapper netgo no_devmapper static_build cni"
  goTags: "dfrunsecurity dfrunnetwork dfrunmount dfssh containers_image_openpgp"

tasks:
  sign:
    desc: 'Sign last version tag + origin/main and push signatures. Important vars: "refs".'
    cmds:
      - git fetch --tags -f
      - git signatures pull {{.CLI_ARGS}}
      - |
        for ref in {{.refs | default "$(git tag --sort=v:refname | tail -n1) origin/main"}}; do
          echo Signing $ref...
          git signatures add {{.CLI_ARGS}} $ref
          git signatures show {{.CLI_ARGS}} $ref
        done
      - git signatures push {{.CLI_ARGS}}
  lint:
    desc: 'Run all linters in parallel. Important vars: "paths".'
    deps:
      - lint:golangci-lint

  lint:golangci-lint:cgo:
    desc: 'Lint with golangci-lint for cgo. Important vars: "paths".'
    cmds:
      - golangci-lint run --build-tags="{{.cgoTags}}" {{.CLI_ARGS}} {{.paths | default "./..."}}
    env:
      CGO_ENABLED: "1"

  lint:golangci-lint:go:
    desc: 'Lint with golangci-lint without cgo. Important vars: "paths".'
    cmds:
      - golangci-lint run --build-tags="{{.goTags}}" {{.CLI_ARGS}} {{.paths | default "./..."}}
    env:
      CGO_ENABLED: "0"

  _lint:golangci-lint:cgo-and-go:
    cmds:
      - task: lint:golangci-lint:cgo
        vars:
          paths: "{{.paths}}"
      - task: lint:golangci-lint:go
        vars:
          paths: "{{.paths}}"

  _lint:golangci-lint:go:
    deps:
      - task: lint:golangci-lint:go
        vars:
          paths: "{{.paths}}"

  lint:golangci-lint:
    desc: 'Lint with golangci-lint (with and without cgo). Important vars: "paths".'
    deps:
      - task: _lint:golangci-lint:{{ternary "cgo-and-go" "go" (eq .mode "cgo")}}
        vars:
          paths: "{{.paths}}"

  lint:prettier:
    desc: "Check if prettier-formatted."
    deps:
      - lint:prettier:yaml

  lint:prettier:yaml:
    desc: "Check if yaml files are prettier-formatted."
    cmds:
      - prettier -c "**/*.yaml" "**/*.yml"
